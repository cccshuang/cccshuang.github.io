<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>shuang&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-04T15:19:28.202Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>cccshuang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>dh</title>
    <link href="http://yoursite.com/2018/08/04/dh/"/>
    <id>http://yoursite.com/2018/08/04/dh/</id>
    <published>2018-08-04T15:12:07.000Z</published>
    <updated>2018-08-04T15:19:28.202Z</updated>
    
    <content type="html"><![CDATA[<p>$f(x_1) = sin(x_1)^2$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;$f(x_1) = sin(x_1)^2$&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>my first blog</title>
    <link href="http://yoursite.com/2018/08/04/my-first-blog/"/>
    <id>http://yoursite.com/2018/08/04/my-first-blog/</id>
    <published>2018-08-04T13:59:53.000Z</published>
    <updated>2018-08-04T14:04:00.279Z</updated>
    
    <content type="html"><![CDATA[<p>ljlj</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ljlj&lt;/p&gt;

      
    
    </summary>
    
      <category term="database" scheme="http://yoursite.com/categories/database/"/>
    
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
      <category term="database" scheme="http://yoursite.com/tags/database/"/>
    
      <category term="deeplearning" scheme="http://yoursite.com/tags/deeplearning/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/08/04/hello-world/"/>
    <id>http://yoursite.com/2018/08/04/hello-world/</id>
    <published>2018-08-04T03:58:29.234Z</published>
    <updated>2018-08-04T03:58:29.234Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MongoDB学习笔记</title>
    <link href="http://yoursite.com/2018/01/17/2018-01-17-MongoDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/01/17/2018-01-17-MongoDB学习笔记/</id>
    <published>2018-01-17T11:40:37.000Z</published>
    <updated>2018-01-17T12:25:16.463Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h3><h3 id="Windows上安装方法："><a href="#Windows上安装方法：" class="headerlink" title="Windows上安装方法："></a>Windows上安装方法：</h3><ol><li>下载，安装，可以从customer自定义安装路径后，例如我设置的安装路径为”F:\MongoDB\”，一直Next直到安装结束。</li><li>配置<ul><li>将安装路径下的bin目录添加到环境变量PATH中，例如我的是”F:\MongoDB\bin”；</li><li>配置MongoDB的存储路径，例如我配置的是”F:\MongoDB\data\db”，就是在”F:\MongoDB\”这个文件夹下新建”data\db”这种目录结构；</li><li>将MongoDB注册为服务，以方便日后的使用：<ul><li>打开cmd命令行，输入（将logpath 和dbpath 改成自己的）：<br><code>mongod --logpath &quot;F:\MongoDB\logs.log&quot; --dbpath &quot;F:\MongoDB\data\db&quot; --install</code><ul><li>注册完成，便可通过输入：<br><code>net start mongodb</code><br>便可启动服务。</li></ul></li></ul></li><li>在命令行输入<code>mongo</code>之后便可以打开shell对MongoDB进行操作啦~</li></ul></li></ol><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><table><thead><tr><th>SQL概念</th><th>MongoDB概念</th><th>说明</th></tr></thead><tbody><tr><td>database</td><td>database</td><td>数据库</td></tr><tr><td>table</td><td>collection</td><td>数据库表/集合</td></tr><tr><td>row</td><td>document</td><td>数据行/文档</td></tr><tr><td>column</td><td>field</td><td>数据字段列/域</td></tr></tbody></table><p>文档：文档是有序的，大小写敏感的。键不能包含”\0”，这个字符用于标记键的结尾；”.”、”$”、”_”保留，建议不要使用在键中。文档的数据结构和JSON基本一样，所有存在集合中的数据都是BSON格式。</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ul><li>创建/删除数据库<br><code>show dbs</code>查看所有数据库<br><code>use DATABASE_NAME</code>创建数据库，若不存在则新建，否则进入此数据库<br><code>db.dropDatabase()</code>删除当前数据库</li><li>集合<br><code>show collections</code>查看所有集合<br><code>db.createCollection(name, options)</code> 创建集合。options参数是可选的，如autoIndexId 参数，如果为true，则在_id字段上自动创建索引，默认值为false。<br>例子：<code>db.createCollection(&quot;mytest&quot;, { autoIndexId : true})</code><br><code>db.COLLECTION_NAME.drop()</code> 删除集合</li><li><p>插入文档<br>insert()或save()方法<br><code>db.COLLECTION_NAME.insert(document)</code><br>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> db.mytest.insert(&#123;</span><br><span class="line">name: &apos;Bob&apos;,</span><br><span class="line">score: 100</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>查询文档<br><code>db.COLLECTION_NAME.find()</code> 相当于SQL中的select * from tabe<br><code>db.COLLECTION_NAME.find().pretty()</code>以易读方式展现<br>条件语句和操作符：</p></li></ul><table><thead><tr><th>操作</th><th>格式</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>等于</td><td><code>{&lt;key&gt;:&lt;value&gt;}</code></td><td><code>db.mytest.find({&quot;score&quot;:100})</code></td><td>从mytest集合中找到score等于100的文档</td></tr><tr><td>小于</td><td><code>{&lt;key&gt;:{$lt:&lt;value&gt;}}</code></td><td><code>db.mytest.find({&quot;score&quot;:{$lt:100}})</code></td><td>从mytest集合中找到score小于100的文档</td></tr><tr><td>小于或等于</td><td><code>{&lt;key&gt;:{$lte:&lt;value&gt;}}</code></td><td><code>db.mytest.find({&quot;score&quot;:{$lte:100}})</code></td><td>从mytest集合中找到score小于或等于100的文档</td></tr><tr><td>大于</td><td><code>{&lt;key&gt;:{$gt:&lt;value&gt;}}</code></td><td><code>db.mytest.find({&quot;score&quot;:{$gt:100}})</code></td><td>从mytest集合中找到score大于100的文档</td></tr><tr><td>大于或等于</td><td><code>{&lt;key&gt;:{$gte:&lt;value&gt;}}</code></td><td><code>db.mytest.find({&quot;score&quot;:{$gte:100}})</code></td><td>从mytest集合中找到score大于或等于100的文档</td></tr><tr><td>不等于</td><td><code>{&lt;key&gt;:{$ne:&lt;value&gt;}}</code></td><td><code>db.mytest.find({&quot;score&quot;:{$ne:100}})</code></td><td>从mytest集合中找到score不等于100的文档</td></tr></tbody></table><p> 条件组合：<br>  AND：以逗号隔开<br><code>db.mytest.find({&quot;score&quot;:{$gte:100}, &quot;name&quot;:&quot;Bob&quot;})</code><br> OR:使用关键字”$or”<br><code>db.mytest.find({$or:[{&quot;score&quot;:{$gte:100}},{&quot;name&quot;: &quot;Tom&quot;}]}).pretty()</code></p><ul><li><p>更新文档</p><ul><li>update()方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> db.COLLECTION_NAME.update(</span><br><span class="line">   &lt;query&gt;,  update的查询条件</span><br><span class="line">   &lt;update&gt;,  update的更新对象等，类似sql update查询内set后面的</span><br><span class="line">   &#123;</span><br><span class="line">     upsert: &lt;boolean&gt;,  可选，不存在update的记录，是否新插入，默认是false，不插入</span><br><span class="line">     multi: &lt;boolean&gt;, 可选，默认是false,只更新找到的第一条记录</span><br><span class="line">     writeConcern: &lt;document&gt; 可选，抛出异常的级别</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><p>例子：将名字为Bob的记录更改为Jack，更新多条<br><code>db.mytest.update({&#39;name&#39;:&#39;Bob&#39;},{$set:{&#39;name&#39;:&#39;Jack&#39;}},{multi:true})</code></p><ul><li>save()方法：通过传入的文档来替换已有文档<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   db.COLLECTION_NAME.save(</span><br><span class="line">   &lt;document&gt;, 文档数据</span><br><span class="line">   &#123;</span><br><span class="line">     writeConcern: &lt;document&gt; 可选，抛出异常的级别</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>例子：替换 _id 为 56064f89ade2f21f36b04236 的文档数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.mytest.save(&#123;</span><br><span class="line">    &quot;_id&quot; : ObjectId(&quot;5a5f103d1fa359a981d5ec90&quot;),</span><br><span class="line">    &quot;name&quot; : &quot;Marry&quot;,</span><br><span class="line">    &quot;score&quot; :  100</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><ul><li>删除文档<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.remove(</span><br><span class="line">   &lt;query&gt;, 可选，删除的文档的条件。若无，则删除全部文档</span><br><span class="line">   &#123;</span><br><span class="line">     justOne: &lt;boolean&gt;, 可选，设为 true 或 1，则只删除一个文档</span><br><span class="line">     writeConcern: &lt;document&gt; 可选，抛出异常的级别</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><p>例子：删除名字为Tom的文档<br><code>db.mytest.remove({&quot;name&quot;:&quot;Marry&quot;})</code></p><p>练习：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">use mydb  #创建数据库</span><br><span class="line">show dbs  #查询所有数据库</span><br><span class="line">db.createCollection(&quot;mytest&quot;, &#123; autoIndexId : true&#125;) #创建集合mytest</span><br><span class="line">show collections  #查询所有集合</span><br><span class="line">#插入数据</span><br><span class="line">db.mytest.insert(&#123;</span><br><span class="line">      name: &apos;Bob&apos;,</span><br><span class="line">      score: 100</span><br><span class="line">      &#125;)</span><br><span class="line">db.mytest.insert(&#123;</span><br><span class="line">      name: &apos;Tom&apos;,</span><br><span class="line">      score: 96</span><br><span class="line">      &#125;)</span><br><span class="line">db.mytest.find(&#123;&quot;score&quot;:100&#125;) #查询mytest中score为100的记录</span><br><span class="line">db.mytest.find(&#123;&quot;score&quot;:&#123;$lt:100&#125;&#125;)</span><br><span class="line">db.mytest.find(&#123;$or:[&#123;&quot;score&quot;:&#123;$gte:100&#125;&#125;,&#123;&quot;name&quot;: &quot;Tom&quot;&#125;]&#125;).pretty()</span><br><span class="line">db.mytest.update(&#123;&apos;name&apos;:&apos;Bob&apos;&#125;,&#123;$set:&#123;&apos;name&apos;:&apos;Jack&apos;&#125;&#125;,&#123;multi:true&#125;)</span><br><span class="line">db.mytest.find() #查询mytest中所有记录</span><br><span class="line">#将_id为5a5f103d1fa359a981d5ec90的数据替换</span><br><span class="line">db.mytest.save(&#123;</span><br><span class="line">    &quot;_id&quot; : ObjectId(&quot;5a5f103d1fa359a981d5ec90&quot;),</span><br><span class="line">    &quot;name&quot; : &quot;Marry&quot;,</span><br><span class="line">    &quot;score&quot; :  100</span><br><span class="line">&#125;)</span><br><span class="line">db.mytest.remove(&#123;&quot;name&quot;:&quot;Marry&quot;&#125;)  #删除mytest中名字为Marry的记录</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;MongoDB&quot;&gt;&lt;a href=&quot;#MongoDB&quot; class=&quot;headerlink&quot; title=&quot;MongoDB&quot;&gt;&lt;/a&gt;MongoDB&lt;/h3&gt;&lt;h3 id=&quot;Windows上安装方法：&quot;&gt;&lt;a href=&quot;#Windows上安装方法：&quot; class
      
    
    </summary>
    
      <category term="Database" scheme="http://yoursite.com/categories/Database/"/>
    
    
      <category term="MongoDB" scheme="http://yoursite.com/tags/MongoDB/"/>
    
      <category term="NoSQL" scheme="http://yoursite.com/tags/NoSQL/"/>
    
  </entry>
  
  <entry>
    <title>对西安市计算机相关职位情况的分析</title>
    <link href="http://yoursite.com/2018/01/14/2018-01-14-%E5%AF%B9%E8%A5%BF%E5%AE%89%E5%B8%82%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3%E8%81%8C%E4%BD%8D%E6%83%85%E5%86%B5%E7%9A%84%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2018/01/14/2018-01-14-对西安市计算机相关职位情况的分析/</id>
    <published>2018-01-14T06:55:05.000Z</published>
    <updated>2018-01-14T07:00:44.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对西安市计算机相关职位情况的分析"><a href="#对西安市计算机相关职位情况的分析" class="headerlink" title="对西安市计算机相关职位情况的分析"></a>对西安市计算机相关职位情况的分析</h1><h2 id="报告主题"><a href="#报告主题" class="headerlink" title="报告主题"></a>报告主题</h2><p>本报告主要有以下几个目的：</p><ol><li>分析西安市计算机相关职位的需求情况</li><li>分析西安市计算机相关职位的薪酬情况</li><li>分析西安市计算机相关职位的招聘要求</li><li>为广大意向从事计算机行业人群的就业提供借鉴和指导</li></ol><h2 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h2><p>本报告对<code>智联招聘</code>网站进行爬虫，主要采集以下几方面的数据,爬虫代码见作业中<code>代码</code>部分。</p><ul><li>Java相关职位</li><li>C++相关职位</li><li>Python相关职位</li><li>C#相关职位</li><li>Ruby相关职位</li><li>PHP相关职位</li><li>.NET相关职位</li><li>Swift相关职位</li><li>Go相关职位</li><li>Scala相关职位</li></ul><h2 id="分析思路"><a href="#分析思路" class="headerlink" title="分析思路"></a>分析思路</h2><p>分析思路主要包含以下几步。</p><ul><li>数据读取</li><li>数据整理</li><li>分析职位数量情况</li><li>分析职位月薪情况</li><li>分析招聘岗位要求</li></ul><h2 id="计算过程"><a href="#计算过程" class="headerlink" title="计算过程"></a>计算过程</h2><p>以下是数据分析和数据挖掘过程</p><h3 id="数据读取"><a href="#数据读取" class="headerlink" title="数据读取"></a>数据读取</h3><p>将通过爬虫爬取的数据通过Python按行读取，去除不符合规则的数据，进而转换为字典，存在列表里面。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">def read_data():</span><br><span class="line">    lists=[]</span><br><span class="line">    try:</span><br><span class="line">        f = open(&apos;r.txt&apos;,&apos;r&apos;,encoding=&apos;utf-8&apos;)</span><br><span class="line">        tmp_list = f.readline()</span><br><span class="line">        lists.append(tmp_list)</span><br><span class="line">        while tmp_list:</span><br><span class="line">            tmp_list = f.readline()</span><br><span class="line">            lists.append(tmp_list)</span><br><span class="line">    except:</span><br><span class="line">        print(&apos;error:&apos;,tmp_list)</span><br><span class="line">    finally:</span><br><span class="line">        f.close()     </span><br><span class="line">    datas = []  </span><br><span class="line">    for item in lists:</span><br><span class="line">        if(not item.startswith(&apos;&#123;\&apos;&apos;)):</span><br><span class="line">            continue       </span><br><span class="line">        dic = eval(item)</span><br><span class="line">        datas.append(dic)</span><br><span class="line">    return datas</span><br></pre></td></tr></table></figure></p><h3 id="数据整理"><a href="#数据整理" class="headerlink" title="数据整理"></a>数据整理</h3><ol><li><p>使用pandas包，将数据组织成DataFrame形式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(datas)</span><br></pre></td></tr></table></figure></li><li><p>将日期格式规范化，并对数据进行筛选，对月薪的数据进行筛选，选取格式为“XXXX-XXXX”的信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(datas)</span><br><span class="line">df[&apos;save_date&apos;] = pd.to_datetime(df[&apos;save_date&apos;])</span><br><span class="line">df_clean = df[[&apos;position_name&apos;,</span><br><span class="line">       &apos;feedback&apos;,</span><br><span class="line">       &apos;company_name&apos;,</span><br><span class="line">       &apos;salary&apos;,</span><br><span class="line">       &apos;place&apos;,</span><br><span class="line">       &apos;time&apos;,</span><br><span class="line">       &apos;brief&apos;,</span><br><span class="line">       &apos;link&apos;,</span><br><span class="line">       &apos;save_date&apos;,</span><br><span class="line">       &apos;keyword&apos;]]</span><br><span class="line">df_clean = df_clean[df_clean[&apos;salary&apos;].str.contains(&apos;\d+-\d+&apos;, regex=True)]</span><br></pre></td></tr></table></figure></li><li><p>根据链接作为标志判断爬取的数据是否有重复值，并进行去重工作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_clean_concat = df_clean_concat.drop_duplicates([&apos;link&apos;])</span><br></pre></td></tr></table></figure></li></ol><h3 id="分析职位数量情况"><a href="#分析职位数量情况" class="headerlink" title="分析职位数量情况"></a>分析职位数量情况</h3><p>对西安市计算机行业不同职位数量的分布情况进行分析。</p><ol><li><p>首先以不同职位作为关键词进行分析，并按职位数量进行排序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df_key_main = df_city[df_city[&apos;keyword&apos;].isin(KEYWORDS)]</span><br><span class="line">df_key_main_count = df_key_main.groupby(&apos;keyword&apos;)[&apos;position_name&apos;,&apos;company_name&apos;].count()</span><br><span class="line">df_key_main_count[&apos;company_name&apos;] = df_key_main_count[&apos;company_name&apos;]/(df_key_main_count[&apos;company_name&apos;].sum())</span><br><span class="line">df_key_main_count.columns = [&apos;number&apos;, &apos;percentage&apos;]</span><br><span class="line">df_key_main_count.sort_values(by=&apos;number&apos;, ascending=False, inplace=True)</span><br></pre></td></tr></table></figure></li><li><p>对西安市计算机行业不同职位数量的情况进行分析，以饼图的形式呈现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">label = df_key_main_count[&apos;label&apos;]</span><br><span class="line">sizes = df_key_main_count[&apos;number&apos;]</span><br><span class="line"># 设置绘图区域大小</span><br><span class="line">fig, axes = plt.subplots(figsize=(10,6),ncols=2)</span><br><span class="line">ax1, ax2 = axes.ravel()</span><br><span class="line">colors  = [&quot;blue&quot;,&quot;red&quot;,&quot;coral&quot;,&quot;green&quot;,&quot;yellow&quot;,&quot;orange&quot;] </span><br><span class="line">patches, texts = ax1.pie(sizes,labels=None, shadow=False, startangle=0, colors=colors)</span><br><span class="line">ax1.axis(&apos;equal&apos;)  </span><br><span class="line">ax1.set_title(&apos;职位数量分布&apos;, loc=&apos;center&apos;)</span><br><span class="line"># ax2 只显示图例（legend）</span><br><span class="line">ax2.axis(&apos;off&apos;)</span><br><span class="line">ax2.legend(patches, label, loc=&apos;center left&apos;, fontsize=9)</span><br><span class="line">plt.savefig(&apos;job_pie.jpg&apos;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li></ol><p>所得饼图如下所示：<br><img src="/images/job_pie.jpg" alt="Alt text"></p><p>观察图表，可以看到，传统的Java和C++开发职位占据所有职位数量的半壁江山，此外，.NET，PHP，Python也占据了一部分，而像Scala，Swift等新出现的语言相关的职位则几乎没有。所以，像Java，C++在西安的计算机相关职位招聘中还是属于主流。</p><h3 id="分析职位月薪情况"><a href="#分析职位月薪情况" class="headerlink" title="分析职位月薪情况"></a>分析职位月薪情况</h3><p>对西安市的职位月薪情况进行分析。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">df_salary_adjust = df_clean_concat[df_clean_concat[&apos;salary_min&apos;]&lt;=20000]</span><br><span class="line"> fig, (ax1, ax2) = plt.subplots(figsize=(10,8), nrows=2)</span><br><span class="line"> x_pos = list(range(df_salary_adjust.shape[0]))</span><br><span class="line"> y1 = df_salary_adjust[&apos;salary_min&apos;]</span><br><span class="line"> ax1.plot(x_pos, y1)</span><br><span class="line"> ax1.set_title(&apos;西安计算机相关职位月薪趋势图&apos;, size=14)</span><br><span class="line"> ax1.set_xticklabels(&apos;&apos;)</span><br><span class="line"> ax1.set_ylabel(&apos;最低月薪(RMB)&apos;)</span><br><span class="line"> bins = [3000,6000, 9000, 12000, 15000, 18000, 21000]</span><br><span class="line"> counts, bins, patches = ax2.hist(y1, bins, normed=1, histtype=&apos;bar&apos;, facecolor=&apos;g&apos;, rwidth=0.8)</span><br><span class="line"> ax2.set_title(&apos;西安计算机相关职位月薪直方图&apos;, size=14)</span><br><span class="line"> ax2.set_yticklabels(&apos;&apos;)</span><br><span class="line"> ax2.set_xticks(bins) </span><br><span class="line"> ax2.set_xticklabels(bins, rotation=-90)</span><br><span class="line"> # Label the raw counts and the percentages below the x-axis...</span><br><span class="line"> bin_centers = 0.5 * np.diff(bins) + bins[:-1]</span><br><span class="line"> for count, x in zip(counts, bin_centers):</span><br><span class="line">     percent = &apos;%0.0f%%&apos; % (100 * float(count) / counts.sum())</span><br><span class="line">     ax2.annotate(percent, xy=(x, 0), xycoords=(&apos;data&apos;, &apos;axes fraction&apos;),</span><br><span class="line">                 xytext=(0, -40), textcoords=&apos;offset points&apos;, va=&apos;top&apos;, ha=&apos;center&apos;, rotation=-90, color=&apos;b&apos;, size=14)</span><br><span class="line"> fig.savefig(&apos;salary_inXian.jpg&apos;)</span><br><span class="line"> fig.show()</span><br></pre></td></tr></table></figure></p><p>所得结果如下所示：<br><img src="/images/salary_inXian.jpg" alt="Alt text"></p><p>观察图表，可以看到，西安市计算机相关职位月薪在3000~12000人民币占据了绝大部分，也有一小部分月薪达到了12000以上，但几乎没有超过20000的。这个月薪水平在西安可以基本达到小康水平。</p><h3 id="分析招聘岗位要求"><a href="#分析招聘岗位要求" class="headerlink" title="分析招聘岗位要求"></a>分析招聘岗位要求</h3><p>对西安市计算机相关职位招聘岗位要求描述进行词云图分析<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">brief_list = list(df_clean_concat[&apos;brief&apos;])</span><br><span class="line">brief_str = &apos;&apos;.join(brief_list)</span><br><span class="line"># 首先使用 jieba 中文分词工具进行分词</span><br><span class="line">wordlist = jieba.cut(brief_str, cut_all=False)      </span><br><span class="line"># cut_all, True为全模式，False为精确模式</span><br><span class="line">wordlist_space_split = &apos; &apos;.join(wordlist)</span><br><span class="line"></span><br><span class="line">my_wordcloud = WordCloud( max_words=100, font_path=&quot;simhei.ttf&quot;,background_color=&quot;white&quot;,</span><br><span class="line">                     max_font_size=300, random_state=42).generate(wordlist_space_split)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.imshow(my_wordcloud)            # 以图片的形式显示词云</span><br><span class="line">plt.axis(&apos;off&apos;)                     # 关闭坐标轴</span><br><span class="line">plt.show()</span><br><span class="line">my_wordcloud.to_file(os.path.join( &apos;brief_cloud.png&apos;))</span><br></pre></td></tr></table></figure></p><p>所得结果如下所示：</p><p><img src="/images/brief_cloud.png" alt="Alt text"></p><p>观察图表，可以看到企业在进行招聘时，看重具有相关的开发经验，比较青睐相关专业的人员，学历也占据了相对来说比较重要的地位，另外，也希望应聘人员具有团队合作的能力，具有较好的学习能力。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>本分析报告结论如下：</p><ul><li>Java，C++等开发岗位在西安的计算机相关职位招聘中属于主流，需求较多。</li><li>西安市计算机相关职位月薪大多在3000~12000人民币，在西安可以基本达到小康水平。</li><li>企业希望应聘人员具有相关的开发经验，比较青睐相关专业的人员，学历也占据了相对来说比较重要的地位。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;对西安市计算机相关职位情况的分析&quot;&gt;&lt;a href=&quot;#对西安市计算机相关职位情况的分析&quot; class=&quot;headerlink&quot; title=&quot;对西安市计算机相关职位情况的分析&quot;&gt;&lt;/a&gt;对西安市计算机相关职位情况的分析&lt;/h1&gt;&lt;h2 id=&quot;报告主题&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="Data mining" scheme="http://yoursite.com/categories/Data-mining/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="data" scheme="http://yoursite.com/tags/data/"/>
    
  </entry>
  
</feed>
